#!/bin/bash

set -eu

build_dbsnp () {
    wget http://hgdownload.soe.ucsc.edu/goldenPath/hg19/database/snp150.txt.gz
    echo "build_dbsnp: Downloaded snp150.txt.gz from hgdownload.soe.ucsc.edu/goldenPath/hg19/database/." > /dev/stderr
    awk '{ print $5, $2, $4,$10 }' <(zcat snp150.txt.gz) > snp150.tmp
    echo "build_dbsnp: Extracted relevant information to snp150.tmp." > /dev/stderr
    sqlite3 $(dirname -- $0)/snp150.db "CREATE TABLE snp150(rsid text NOT NULL, chrom text NOT NULL, pos INTEGER NOT NULL, alleles text NOT NULL);"
    sqlite3 -separator ' ' $(dirname -- $0)/snp150.db '.import "snp150.tmp" "snp150"'
    sqlite3 -separator ' ' $(dirname -- $0)/snp150.db 'CREATE INDEX idx_rsid ON snp150(rsid);'
    chmod 444 $(dirname -- $0)/snp150.db
    rm snp150.tmp
    echo "build_dbsnp: dbSNP database written to $(dirname -- $0)/snp150.db." > /dev/stderr
}

init () {
    cat <(zcat -f -- "${GWAS_F}") > ${SNAPTMP}/SNAP.GWAS.init
    sort "${QSNP_F}" | uniq -d > duplicates.txt
    sort "${QSNP_F}" | uniq | awk '{ print $1,".",".",".","." }' -
    echo "init: $(cat duplicates.txt | wc -l) duplicated SNP identifiers removed, written to duplicates.txt." > /dev/stderr
}

match () {
    cat </dev/stdin > ${SNAPTMP}/SNAP.TMP.match
    awk 'FNR==NR { m[$1]=1; next } $2=="." && ($1 in m)  { $2=$1;$3=1;$4=0;$5="match";c+=1 } { print } END { print "match: Matched",c,"SNP by exact match." > "/dev/stderr"}' \
	${SNAPTMP}/SNAP.GWAS.init \
	${SNAPTMP}/SNAP.TMP.match
}

position () {
    ## Purpose: query is Rsid but target contains chromosome position.
    ## Method: Searches local copy of dbSNP UCSC genome browser track for Rsid, return genomic position and cross reference to target.
    cat </dev/stdin > ${SNAPTMP}/SNAP.TMP.position
    echo "position: Started search by genomic position, please wait." > /dev/stderr
    awk '$1 !~ /rs/ { match($1, "(chr)?([0-9]+)[^0-9]+([0-9]+)", ary); print $1, ary[2]":"ary[3]}' ${SNAPTMP}/SNAP.GWAS.init > ${SNAPTMP}/SNAP.GWAS.position
    if [[ -s  ${SNAPTMP}/SNAP.GWAS.position ]]; then 
	## Search dbSNP by rsid, return genomic position, etc.
	while read snp; do 
	    sqlite3 -separator ' ' "${UCSC_DBSNP}" "select * from snp150 where rsid=\"$snp\""
	done < <(awk '$2=="." { print $1 }' ${SNAPTMP}/SNAP.TMP.position) | \
	    awk '{ chr=$2; gsub("chr", "", chr); print $1,$2,$3,$4,chr":"$3 }' > ${SNAPTMP}/SNAP.DBSNP.position
	## awk '$2=="." { print $1 }' ${SNAPTMP}/SNAP.TMP.position > ${SNAPTMP}.SNAPTMP.unresolved.position
    	awk 'FNR==NR { m[$2]=$1; next } $5 in m { print $0, m[$5] }'  ${SNAPTMP}/SNAP.GWAS.position ${SNAPTMP}/SNAP.DBSNP.position > ${SNAPTMP}/SNAP.DBSNP.GWAS.position
	awk 'BEGIN { c=0 } FNR==NR { m[$1]=$6; next } $1 in m { $2=m[$1];$3=1;$4=0;$5="position";c+=1} { print } END { print "position: Matched",c,"SNPs by position." > "/dev/stderr"}' ${SNAPTMP}/SNAP.DBSNP.GWAS.position ${SNAPTMP}/SNAP.TMP.position -
    else 
	echo "position: Warning -- Analysis was not performed. The target file does not contain SNP identifiers with positional information." > /dev/stderr
	cat ${SNAPTMP}/SNAP.TMP.position
    fi
}

proxy () {

    ## Purpose: Search for LD-proxy of Rsid.
    ## Method: Use 1000 Genomes to search for proxy of given Rsid. Return closest proxy with r^2 > PLINK_MIN_R2.
    cat </dev/stdin > ${SNAPTMP}/SNAP.TMP.proxy
    awk '$2=="." { print $1 }' ${SNAPTMP}/SNAP.TMP.proxy > ${SNAPTMP}/SNAP.input.proxy
    set +e
    for CHROM in {1..22}
    do
	echo "proxy: Running PLINK LD analysis for chromosome ${CHROM}." > /dev/stderr
	plink --bfile "${PLINK_REF_PANEL}"/"${CHROM}" \
	    --r2 --ld-window 1000000 --ld-window-kb 1000 --ld-window-r2 ${PLINK_MIN_R2} \
	    --keep "${PLINK_REF_PANEL_KEEP}" \
	    --out ${SNAPTMP}/SNAP.${CHROM}.proxy \
	    --ld-snp-list ${SNAPTMP}/SNAP.input.proxy \
	    > /dev/null
	retVal=$?
	if [ $retVal -eq 0 ]; then
	    perl -pi -e "s/[ \t]+/ /g;" ${SNAPTMP}/SNAP.${CHROM}.proxy.ld
	    perl -pi -e "s/^[ \t]+//g;" ${SNAPTMP}/SNAP.${CHROM}.proxy.ld
	    perl -pi -e "s/[ \t]+$//g;" ${SNAPTMP}/SNAP.${CHROM}.proxy.ld
	fi
    done
    set -e
    ## Filter proxy results for those SNPs that are in the target
    awk 'FNR==NR { m[$1]=1; next } $6 in m { print }' ${SNAPTMP}/SNAP.GWAS.init <(tail -q -n +2 ${SNAPTMP}/SNAP.*.proxy.ld) > ${SNAPTMP}/SNAP.proxy.ld.gwas
    ## Compute distance from proxy index SNP, sort proxy results by index SNP, then r2, then position, retaining top SNP ie, the one with highest r2 that is closest to the index SNP
    awk '{ d=$5-$2; if (d < 0) { d=$2-$5 }; print $0, d }' ${SNAPTMP}/SNAP.proxy.ld.gwas | sort -k 3,3 -k7,7nr -k8,8n | sort -k 3,3 -u > ${SNAPTMP}/SNAP.proxy.ld.gwas.bestproxy
    awk 'FNR==NR { m[$3]=$6" "$7" "$8" proxy"; next } $2 == "." && ($1 in m) { print $1, m[$1]; c+=1; next } { print } END { print "proxy: Matched",c,"SNP identifiers by proxy." > "/dev/stderr" }' ${SNAPTMP}/SNAP.proxy.ld.gwas.bestproxy ${SNAPTMP}/SNAP.TMP.proxy
}

update () {
    ## Purpose: Updates the provided Rsid with the latest Rsid from dbSNP.
    ## Method: Query dbSNP for Rsid and return updates Rsid if present.
    cat </dev/stdin > ${SNAPTMP}/SNAP.TMP.update
    echo -n "update: Updating $(awk '$2=="." { print $1 }' ${SNAPTMP}/SNAP.TMP.update | wc -l) SNPs to the latest dbSNP identifiers, please wait " > /dev/stderr
    for rs in $(awk '$2=="." { print $1 }' ${SNAPTMP}/SNAP.TMP.update)
    do
	rsid=$(echo $rs | perl -p -e "s/rs//g;")
	curl -X GET --header "Accept: application/json" "https://api.ncbi.nlm.nih.gov/variation/v0/beta/refsnp/${rsid}" > ${SNAPTMP}/${rs}.dbsnp.json 2> ${SNAPTMP}/${rs}.dbsnp.log
	sleep 0.5
	echo -n "." > /dev/stderr
    done
    echo "" > /dev/stderr
    grep -h merged_into ${SNAPTMP}/*.dbsnp.json | perl -p -e "s/\{\"refsnp_id\"\:\"([0-9]+).*merged_into\"\:\[\"([0-9]+).*/rs\1 rs\2/g;" > updated.txt
    awk 'FNR==NR { m[$1]=$2; next } $1 in m { $1=m[$1]; c+=1 } { print } END { print "update: Updated",c,"SNP identifiers to most recent dbSNP identifiers, conversions written to updated.txt." > "/dev/stderr" }' updated.txt ${SNAPTMP}/SNAP.TMP.update
}

clean () {
    rm ${SNAPTMP}/*
}

UCSC_DBSNP=$(dirname -- $0)/snp150.db
SNAPTMP=.SNAPTMP
mkdir -p ${SNAPTMP}
COMMAND=$1
case "${COMMAND}" in
    init)
	QSNP_F=$2
	GWAS_F=$3
	init
	;;
    match)
	match
	;;
    position)
	position
	;;
    proxy)
	PLINK_REF_PANEL=$2
	PLINK_REF_PANEL_KEEP=$3
	PLINK_MIN_R2=$4
	proxy
	;;
    update)
	update
	;;
    build_dbsnp)
	build_dbsnp
	;;
    clean)
	clean
	;;
    *)
	echo $"Usage: $0 init query.txt target.txt | (match | position | proxy | update)"
	exit 1
esac
